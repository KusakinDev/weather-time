pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_USERNAME = 'debilyator'
        GO_API_IMAGE = "${DOCKER_USERNAME}/go-api"
        NEXTJS_IMAGE = "${DOCKER_USERNAME}/nextjs"
        KUBE_NAMESPACE = 'weather-app'
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                checkout scm  // –∑–∞–±–∏—Ä–∞–µ—Ç –∫–æ–¥ –∏–∑ GitHub
                sh 'git log -1 --oneline'  // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
            }
        }
        stage('Docker Operations') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: 'docker-hub-credentials', 
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh '''
                            # –õ–æ–≥–∏–Ω–∏–º—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ
                            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                            
                            # –í—Å–µ docker –∫–æ–º–∞–Ω–¥—ã –≤ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏
                            cd back
                            docker build -t debilyator/go-api:${BUILD_NUMBER} .
                            docker push debilyator/go-api:${BUILD_NUMBER}
                            
                            cd ../front/FE_WeatherTime  
                            docker build -t debilyator/nextjs:${BUILD_NUMBER} .
                            docker push debilyator/nextjs:${BUILD_NUMBER}
                        '''
                    }
                }
            }
        }
        
        stage('Deploy to K8s') {
            steps {
                script {
                    // –°–æ–∑–¥–∞–µ–º namespace –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    sh """
                        kubectl create namespace ${KUBE_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                    """
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–∑—ã –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞—Ö
                    sh """
                        sed -i 's|your-dockerhub-username|${DOCKER_USERNAME}|g' k8s/go-api/deployment.yaml
                        sed -i 's|your-dockerhub-username|${DOCKER_USERNAME}|g' k8s/nextjs/deployment.yaml
                        sed -i 's|latest|${env.BUILD_ID}|g' k8s/go-api/deployment.yaml
                        sed -i 's|latest|${env.BUILD_ID}|g' k8s/nextjs/deployment.yaml
                    """
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã
                    sh """
                        kubectl apply -f k8s/ -n ${KUBE_NAMESPACE}
                    """
                    
                    // –ñ–¥–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
                    sh """
                        kubectl rollout status deployment/go-api -n ${KUBE_NAMESPACE} --timeout=300s
                        kubectl rollout status deployment/nextjs -n ${KUBE_NAMESPACE} --timeout=300s
                        kubectl rollout status deployment/nginx -n ${KUBE_NAMESPACE} --timeout=300s
                    """
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏
                    sh """
                        echo "=== Deployment Status ==="
                        kubectl get all -n ${KUBE_NAMESPACE}
                        echo "=== Services ==="
                        kubectl get services -n ${KUBE_NAMESPACE}
                    """
                }
            }
        }
    }
    
    post {
        always {
            // –û—á–∏—Å—Ç–∫–∞
            sh 'docker system prune -f'
        }
        success {
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–µ–ø–ª–æ–µ
            sh """
                echo "üöÄ Deployment successful!"
                echo "üìä Check application: minikube service nginx-service -n ${KUBE_NAMESPACE} --url"
            """
        }
        failure {
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–µ
            sh 'echo "‚ùå Deployment failed!"'
        }
    }
}
